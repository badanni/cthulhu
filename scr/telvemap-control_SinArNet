#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#       telvemap-control.py
#       
#       Copyright 2012 Danny E Vasconezz <dannyvasconeze@gmail.com>
#       
#       This program is free software; you can redistribute it and/or modify
#       it under the terms of the GNU General Public License as published by
#       the Free Software Foundation; either version 2 of the License, or
#       (at your option) any later version.
#       
#       This program is distributed in the hope that it will be useful,
#       but WITHOUT ANY WARRANTY; without even the implied warranty of
#       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#       GNU General Public License for more details.
#       
#       You should have received a copy of the GNU General Public License
#       along with this program; if not, write to the Free Software
#       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#       MA 02110-1301, USA.
#       
#       

import AriaPy
import os
import sys
import math
import gobject
import pygtk
pygtk.require("2.0")
import gtk

pathname = os.path.dirname(sys.argv[0])
os.chdir(os.path.abspath(pathname))
sys.path.append("../share/telvemap/lib")
from telvemap.gamepad import gamepad
from telvemap.FuzzyController import controlador
from telvemap.cliente_lib2 import *
from telvemap.renderizado import renderizado as mapa


class telvemap_control:
	def fuzzy_velocidad(self,setpoint,a,imagen):
		sol=-1
		try:
			a.sonares_comando()
			valor_x=a.x
			valor_y=a.y
			a.odometria_comando()
			mi_x=a.odometria[0]
			mi_y=a.odometria[1]
			mi_th=a.odometria[2]
			#
			self.mi_x=mi_x
			self.mi_y=mi_y
			self.mi_th=mi_th
			self.valor_x=valor_x
			self.valor_y=valor_y
			self.bateria=a.odometria[3]
			#
			dato=[]
			self.generador_mapa(imagen,valor_x,valor_y,mi_x,mi_y,mi_th)
			if (len(valor_x)>0):
				for a in range(len(valor_x)): #SIP en c. 
					#print math.sqrt(pow(valor_x['x%d' % a]-mi_x,2)+pow(valor_y['y%d' % a]-mi_y,2)), "calculo"
					dato.append(math.sqrt(pow(float(valor_x['x%d' % a])-float(mi_x),2)+pow(float(valor_y['y%d' % a])-float(mi_y),2)))
				valor_distancia=min(dato) #la distancia mas cercana tomada de la plataforma
				sol=controlador(setpoint,valor_distancia) #Controlador difuso
				if sol<0:
					sol=0
			else:
				sol=400
		except:
			print "Fallo calculo distancia"
			sol='e0'
		return sol
		
	def generador_mapa(self,imagen,valor_x,valor_y,mi_x,mi_y,mi_th):
		try:
			if (len(valor_x)>0):
				for a in range(len(valor_x)):
					imagen.anadir_punto((int(float(valor_x['x%d' % a]))/50+500,int(float(valor_y['y%d' % a]))/50+350),radio=2)
			imagen.crear_imagen()
			imagen=imagen.rotacion_y_posicion_robot(int(float(mi_x))/50+500,int(float(mi_y))/50+350,self.delta_valor+int(float(mi_th)))
		except:
			print "Fallo mapa"

	def robot_ordenes(self,fuzzy_vel,a,a2,b,area,imagen,nombre_archivo):
		aa=b
		vel=self.fuzzy_velocidad(fuzzy_vel,aa,imagen)
		area.set_from_file(nombre_archivo)
		self.label8.set_text("Odometria: (X:%s,Y:%s,Th:%s)" % (self.mi_x,self.mi_y,self.mi_th))
		if vel=="e0":
			print "Fallo VElocidad"
		else:
			if a2[0]=="ar":
				print "Arriba",vel
				aa.envio_movimiento("adelante",str(vel))
				#area
			elif a2[1]=="iz":
				print "Izquierda",vel
				aa.envio_movimiento("izq",str(vel))
			elif a2[1]=="de":
				print "Derecha",vel
				aa.envio_movimiento("der",str(vel))
			elif a2[0]=="ab":
				print "Abajo",vel
				aa.envio_movimiento("atras",str(vel))
			elif a=="b1":
				mensaje="Voltaje de la bateria es: %s [Volt]" % self.bateria
				print "B1", mensaje
				md = gtk.MessageDialog(None, gtk.DIALOG_DESTROY_WITH_PARENT, gtk.MESSAGE_INFO, gtk.BUTTONS_OK, mensaje)
				md.run()
				md.destroy()
			elif a=="b2":
				print "B2"
			elif a=="b3":
				print "B3"
			elif a=="b4":
				print "B4"
			elif a=="l1":
				aa.envio_movimiento("continuar")
				mensaje="Motores activados"
				print "L1", mensaje
				md = gtk.MessageDialog(None, gtk.DIALOG_DESTROY_WITH_PARENT, gtk.MESSAGE_INFO, gtk.BUTTONS_OK, mensaje)
				md.run()
				md.destroy()
			elif a=="l2":
				aa.envio_movimiento("alto") #parada de emergencia
				mensaje="Parada de motores"
				print "L2", mensaje
				md = gtk.MessageDialog(None, gtk.DIALOG_DESTROY_WITH_PARENT, gtk.MESSAGE_INFO, gtk.BUTTONS_OK, mensaje)
				md.run()
				md.destroy()
			elif a=="r1":
				print "R1"
			elif a=="r2":
				print "R2"
			else:
				pass
			#sleep(0.2)
		return a

	def etapa1(self,setpoint,a,aa,gamePad,area,imagen,nombre_archivo):
		a.palanca(gamePad)
		#print a.direccion, a.boton
		self.robot_ordenes(setpoint,a.boton,a.direccion,aa,area,imagen,nombre_archivo)
		valor=True
		if a.boton == "r1":
			valor=False
			aa.cerrar_conexion()
			gtk.main_quit()
		return valor

	def __init__(self,setpoint,ip=None,puerto=None):
		# variables
		self.delta_valor=0
		self.auxiliar=0
		self.mi_x=[]
		self.mi_y=[]
		self.mi_th=[]
		self.valor_x=[]
		self.valor_y=[]
		self.bateria=[]
		
		#Aria.init()
		aa=cliente_lib()
		if ip!=None:
			aa.ip=ip
			aa.puerto=puerto
		aa.conexion()
		a=gamepad()
		gamePad=a.iniciar()
		a.hombre_muerto="r2" #Si no se preciona no lee informacion del gamepad
		a.palanca(gamePad)
		# Inicio de la parte grafica mapas
		dimensiones=(1000,700)
		nombre_archivo="filenamea.jpg"
		home = os.environ['HOME']
		nombre_archivo = home + "/telvemap/"+nombre_archivo
		dimensiones_robot=(13,13)
		imagen=mapa(dimensiones,nombre_archivo,dimensiones_robot)
		imagen.cargar()
		
		
		#Inicio de gtk
		direccion="/usr/local/share/telvemap/glade/" ##Correguir para la instalcion en otro dirrecion
		builder = gtk.Builder() #El archivo de glade debe estar en gtkbuilder
		builder.add_from_file(direccion+"GUI2.glade")#direccion+"glade/GUI.glade") #Carga el archivo glade
		self.teleoper = builder.get_object("map") #Ventana principal
		builder.connect_signals(self) #Toma todas las senales de glade
		area = builder.get_object("image1")
		self.boton1=builder.get_object("button1")
		self.delta=builder.get_object("delta")
		self.label8=builder.get_object("label8")
		#boton2=builder.get_object("button2")
		self.teleoper.show()
		
		# Timer que se repite cada 100ms con sus parametros
		#gobject.threads_init()
		source_id=gobject.timeout_add(100,self.etapa1,setpoint,a,aa,gamePad,area,imagen,nombre_archivo)
		#loop = gobject.MainLoop()
		#loop.run()
		# Fin del Timer
		
		gtk.main()

	def button1_onClic(self,widget, data=None):
		valor=self.delta.get_text()
		try:
			valor=int(float(valor))
		except:
			valor=0
			mensaje="Debe ser un numero, valor cambiado a %d grados" % valor
			md = gtk.MessageDialog(None, gtk.DIALOG_DESTROY_WITH_PARENT, gtk.MESSAGE_INFO, gtk.BUTTONS_OK, mensaje)
			md.run()
			md.destroy()
		self.delta_valor=valor
	
	def destroy_window(self,widget, data=None):
		mensaje="Presione el boton R1 para cerrar"
		print mensaje
		md = gtk.MessageDialog(None, gtk.DIALOG_DESTROY_WITH_PARENT, gtk.MESSAGE_INFO, gtk.BUTTONS_OK, mensaje)
		#md = gtk.MessageDialog(None, 0, gtk.MESSAGE_INFO, gtk.BUTTONS_CLOSE, mensaje)
		md.run()
		md.destroy()
		

if __name__ == '__main__':
	setpoint=150
	ip="localhost"#"192.168.1.5"
	puerto=7274
	a=telvemap_control(setpoint,ip,puerto)

