#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#       telvemap-control.py
#       
#       Copyright 2012 Danny E Vasconezz <dannyvasconeze@gmail.com>
#       
#       This program is free software; you can redistribute it and/or modify
#       it under the terms of the GNU General Public License as published by
#       the Free Software Foundation; either version 2 of the License, or
#       (at your option) any later version.
#       
#       This program is distributed in the hope that it will be useful,
#       but WITHOUT ANY WARRANTY; without even the implied warranty of
#       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#       GNU General Public License for more details.
#       
#       You should have received a copy of the GNU General Public License
#       along with this program; if not, write to the Free Software
#       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#       MA 02110-1301, USA.
#       
#       

import AriaPy
import os
import sys
import math
import gobject
import pygtk
pygtk.require("2.0")
import gtk

#pathname = os.path.dirname(sys.argv[0])
#os.chdir(os.path.abspath(pathname))
#sys.path.append("../share/telvemap/lib")
from telvemap.gamepad import gamepad
from telvemap.FuzzyController import controlador
from telvemap.cliente_lib2 import *
from telvemap.renderizado import renderizado as mapa

def fuzzy_velocidad(setpoint,a,imagen):
	sol=-1
	try:
		a.sonares_comando()
		valor_x=a.x
		valor_y=a.y
		a.odometria_comando()
		mi_x=a.odometria[0]
		mi_y=a.odometria[1]
		mi_th=a.odometria[2]
		dato=[]
		generador_mapa(imagen,valor_x,valor_y,mi_x,mi_y,mi_th)
		if (len(valor_x)>0):
			for a in range(len(valor_x)): #SIP en c. 
				#print math.sqrt(pow(valor_x['x%d' % a]-mi_x,2)+pow(valor_y['y%d' % a]-mi_y,2)), "calculo"
				dato.append(math.sqrt(pow(float(valor_x['x%d' % a])-float(mi_x),2)+pow(float(valor_y['y%d' % a])-float(mi_y),2)))
			valor_distancia=min(dato) #la distancia mas cercana tomada de la plataforma
			sol=controlador(setpoint,valor_distancia) #Controlador difuso
			if sol<0:
				sol=0
		else:
			sol=400
	except:
		print "Fallo calculo distancia"
		sol='e0'
	return sol
	
def generador_mapa(imagen,valor_x,valor_y,mi_x,mi_y,mi_th):
	try:
		if (len(valor_x)>0):
			for a in range(len(valor_x)):
				imagen.anadir_punto((int(float(valor_x['x%d' % a]))/50+500,int(float(valor_y['y%d' % a]))/50+350),radio=2)
		imagen.crear_imagen()
		imagen=imagen.rotacion_y_posicion_robot(int(float(mi_x))/50+500,int(float(mi_y))/50+350,int(float(mi_th)))
	except:
		print "Fallo mapa"

def robot_ordenes(fuzzy_vel,a,a2,b,area,imagen,nombre_archivo):
	aa=b
	vel=fuzzy_velocidad(fuzzy_vel,aa,imagen)
	if vel=="e0":
		print "Fallo VElocidad"
	else:
		if a2[0]=="ar":
			print "Arriba",vel
			aa.envio_movimiento("adelante",str(vel))
			area.set_from_file(nombre_archivo)
			#area
		elif a2[1]=="iz":
			print "Izquierda",vel
			aa.envio_movimiento("izq",str(vel))
			area.set_from_file(nombre_archivo)
		elif a2[1]=="de":
			print "Derecha",vel
			aa.envio_movimiento("der",str(vel))
			area.set_from_file(nombre_archivo)
		elif a2[0]=="ab":
			print "Abajo",vel
			aa.envio_movimiento("atras",str(vel))
			area.set_from_file(nombre_archivo)
		elif a=="b1":
			print "B1"
		elif a=="b2":
			print "B2"
		elif a=="b3":
			print "B3"
		elif a=="b4":
			print "B4"
		elif a=="l1":
			print "L1"
		elif a=="l2":
			print "L2"
			print "prueba"
			aa.envio_movimiento("alto") #parada de emergencia
			area.set_from_file(nombre_archivo)
		elif a=="r1":
			print "R1"
		elif a=="r2":
			print "R2"
		else:
			pass
		#sleep(0.2)
	return a

def etapa1(setpoint,a,aa,gamePad,area,imagen,nombre_archivo):
	a.palanca(gamePad)
	#print a.direccion, a.boton
	robot_ordenes(setpoint,a.boton,a.direccion,aa,area,imagen,nombre_archivo)
	valor=True
	if a.boton == "r1":
		valor=False
		aa.cerrar_conexion()
	return valor

def main(setpoint,ip=None,puerto=None):
	#Aria.init()
	aa=cliente_lib()
	if ip!=None:
		aa.ip=ip
		aa.puerto=puerto
	aa.conexion()
	a=gamepad()
	gamePad=a.iniciar()
	a.hombre_muerto="r2" #Si no se preciona no lee informacion del gamepad
	a.palanca(gamePad)
	# Inicio de la parte grafica mapas
	dimensiones=(1000,700)
	nombre_archivo="filenamea.jpg"
	dimensiones_robot=(13,13)
	imagen=mapa(dimensiones,nombre_archivo,dimensiones_robot)
	imagen.cargar()
	
	
	#Inicio de gtk
	direccion="/usr/local/share/telvemap/" ##Correguir para la instalcion en otro dirrecion
	builder = gtk.Builder() #El archivo de glade debe estar en gtkbuilder
	builder.add_from_file("GUI2.glade")#direccion+"glade/GUI.glade") #Carga el archivo glade
	builder.connect_signals(builder) #Toma todas las senales de glade
	teleoper = builder.get_object("map") #Ventana principal
	area = builder.get_object("image1")
	#boton1=builder.get_object("button1")
	#boton2=builder.get_object("button2")
	teleoper.show()
	
	# Timer que se repite cada 100ms con sus parametros
	#gobject.threads_init()
	source_id=gobject.timeout_add(100,etapa1,setpoint,a,aa,gamePad,area,imagen,nombre_archivo)
	#loop = gobject.MainLoop()
	#loop.run()
	# Fin del Timer
	
	gtk.main()

if __name__ == '__main__':
	setpoint=150
	ip="localhost"#"192.168.1.5"
	puerto=7273
	main(setpoint,ip,puerto)

